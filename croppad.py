# -*- coding: utf-8 -*-
"""croppad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YqeGEvfHwCC2WL7uuC5VEJN1dlBZlhnE
"""

pip install pydub

!sudo apt update && sudo apt install ffmpeg

from pydub import AudioSegment
from pydub.exceptions import CouldntDecodeError
import os

def process_audio_files(input_dir, output_dir, target_duration=18 * 1000):  # 18 seconds in milliseconds
    for root, _, files in os.walk(input_dir):
        # Maintain the folder structure
        relative_path = os.path.relpath(root, input_dir)
        output_folder = os.path.join(output_dir, relative_path)
        if not os.path.exists(output_folder):
            os.makedirs(output_folder)

        for filename in files:
            if filename.endswith(".mp3"):
                audio_path = os.path.join(root, filename)
                try:
                  audio = AudioSegment.from_file(audio_path, format="mp3")
                  if len(audio) > target_duration:
                    # Trim audio
                    audio = audio[:target_duration]
                  else:
                    # Pad audio with silence
                    silence = AudioSegment.silent(duration=target_duration - len(audio))
                    audio = audio + silence
                   # Save the processed audio file in the corresponding output folder
                  output_path = os.path.join(output_folder, filename)
                  audio.export(output_path, format="mp3")
                  print(f"Processed {filename} to {output_path}")
                except CouldntDecodeError as e:
                  print(f"Error decoding {filename}: {e}")
                  # Handle the error - maybe skip the file, log it, etc.
                  continue  # Move to the next file





"""
                # Adjust audio to target duration
                if len(audio) > target_duration:
                    # Trim audio
                    audio = audio[:target_duration]
                else:
                    # Pad audio with silence
                    silence = AudioSegment.silent(duration=target_duration - len(audio))
                    audio = audio + silence

                # Save the processed audio file in the corresponding output folder
                output_path = os.path.join(output_folder, filename)
                audio.export(output_path, format="mp3")
                print(f"Processed {filename} to {output_path}")
"""
# Example usage
input_directory = "/content/drive/MyDrive/CMU MOSEI/Audio/Raw 1/Raw1-2/valid"
output_directory = "/content/drive/MyDrive/CMU MOSEI/Audio/Raw 1/Raw1-2/valid1"
process_audio_files(input_directory, output_directory)